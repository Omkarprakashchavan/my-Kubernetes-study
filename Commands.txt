Pods:

-- Pod is smallet element which holds the containers

kubectl get Pods
kube get pods --all-namespace
kubectl create -f <pod-defination.yml>
kubectl describe Pod <Pod-name>
kubectl edit Pod <Pod-name>
kubectl delete pod <pod-name>

# Imperative commands to create a pod == kubectl run --generator=run-pod/v1 redis --image=redis:alpine -l tier=db
kubectl run --generator=run-pod/v1 bee --image=nginx --tolerations=spray:mortein:NoSchedule

======================================================================================================================================

Replica Set:

-- ReplicaSet holds Pods and Used to create the Replica of Pods

kubectl get replicaset
kubectl get rs
kubectl create -f replicaset-defination.yml
kubectl replace -f replicaset-defination.yml
kubectl edit replicaset <ReplicaSet-name>
kubectl edit replicaset <ReplicaSet-name.yml>
kubectl edit rs <ReplicaSet-name>
kubectl edit rs <ReplicaSet-name.yml>
kubectl delete replicaset <ReplicaSet-name>
kubectl delete <ReplicaSet-name.yml>
kubectl scale --replicas=6 -f replicaset-defination.yml
kubectl scale --replicas=6 replicaset <replicaset-name>

======================================================================================================================================

Deployments:

-- In Deployment we can create complete set of deployment using one file

kubectl get deployments
kubectl create -f deployment-defination.yml
kubectl replace -f deployment-defination.yml
kubectl edit deployment <deployment-name>
kubectl edit deployment <deployment-name.yml>
kubectl edit deployment <deployment-name>
kubectl edit deployment <deployment-name.yml>
kubectl delete deployment <deployment-name>
kubectl delete <deployment-name.yml>
kubectl get all

# Imperative commands to create a deployment == kubectl create deployment webapp --image=kodekloud/webapp-color 
kubectl scale deployment/webapp --replicas=3

======================================================================================================================================

Namespace:

-- Namespace creates the Isolation of resources. By default kubernetes create default Namespace, kube-system, kube-dns.
   all the services/Pods/deployment are available inside the Namespace

mysql.connect("db-service") # to connect to the service within the Namespace
mysql.connect("db.service.dev.svc.cluster.local") # here cluster.local is domain, svc is service, dev is Namespace (other than default)
db.service is service within dev Namespace

kubectl create -f namespace-dev.yml
kubectl create -f namespace dev
kubectl create -f <pod-defination.yml> --namespace=dev
kubectl get all --namespace=<namespace-name>
kubectl get pods --namespace=dev
kubectl get pods --namespace=default
kubectl get pods --namespace=prods
kubectl config set-context $(kubectl config current-context) --namespace=dev    # to set dev as default namespace
kubectl config current-context                                                  # to get current context/namespace

======================================================================================================================================

Resource-Quota:

When several users or teams share a cluster with a fixed number of nodes, there is a concern that one team could use more than its fair 
share of resources. Resource quotas are a tool for administrators to address this concern.
defined by a ResourceQuota object, provides constraints that limit aggregate resource consumption per namespace. 
It can limit the quantity of objects that can be created in a namespace by type, as well as the total amount of compute resources that 
may be consumed by resources in that project

-- To create resource compute Quota on the Hardware

kubectl create -f compute-Quota.yml
kubectl describe quota
kubectl get quota --namespace=<namespace-name>
kubectl describe quota <quota-name> --namespace=<namespace-name>

======================================================================================================================================

Services:

--Services enable communication between various components within and outside of the application. Kubernetes services helps us connect 
applications together with other applications or users.

kubectl get services
kubectl create -f <service-defination.yml>

# Imperative commands to create Services == kubectl expose pod redis --port=6379 --name redis-service
kubectl expose deployment webapp-service --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml

======================================================================================================================================

Scheduler:

-- Scheduler used to Schedule the pod on available nodes. If nodeName is specified in pod-defination.yml file then pod will be Schedule
nodeName node. If nodeName is not defined then pod will be Schedule on next available node. Once Pod is created it cannot be movde to 
any other node.
To assign a node to existing pod binding object can be ceated and send POST request to Pod's binding API.

Example: curl --header "Content-Type:application/json" --request POST --data '{"apiVersion":"v1", "kind": "Binding“ …. }'
http://$SERVER/api/v1/namespaces/default/pods/$PODNAME/binding/

======================================================================================================================================

Taint and Tolerations:

-- Taint are used to apply on the nodes and Tolerations are used to apply on Pods
If a pod have same Tolerations as Taint of node then pod can be Schedule on node

kubectl taint nodes node-name key=value:taint-effect
# taint-effect is what happens to pod that do not tolerant the taint [NoSchedule | PreferNoSchedule | NoExecute]

to remove taint effect from node use below command:
kubectl taint nodes master node-role.kubernetes.io/master:NoSchedule-

======================================================================================================================================

Node Selector:

-- nodeSelector is used to select the node for pod scheduling, it is noting but using label of the node
For this we need to label the node, for labeling the node use below command:

kubectl label node <node-name> <label-key>=<label-value>

Drawback of nodeSelector is we can not use multiple tags for node Selector. Hence node affinity comes in picture, using which we can 
include multiple labels for scheduling pod on required node

======================================================================================================================================

Node Affinity:

-- The primary purpose of node affinity feature is to ensure that pods are hosted on particular notes.
kubectl label node node01 color=blue    # labeling node

======================================================================================================================================

Minimum amount of CPU required by pod is 0.5 and memory is 256 MB
To modify this values you have to edit pod-defination.yml file and add resource section in specification
Minimum requirement of CPU can be set t0 1m, where m is in mili
CPU Requirements in POD:
1 CPU is equal to:  1 vCPU in AWS
                    1 Core in GCP
                    1 Core in Azure
                    1 Hyperthread

By default 1 container consumes 1 vCPU if not explicitly defined in pod-defination file
By default 1 container consumes 256Mi if not explicitly defined in pod-defination file

======================================================================================================================================

Daemon Set:

-- The daemon set ensures that one copy of the pod is always present in all nodes in the cluster.

kubectl get daemonset
kubectl create -f <daemonset-defination.yaml>
kubectl describe daemonset <daemon-name>
kubectl delete daemonset <daemon-name>
kubectl edit daemonset <daemon-name>
kubectl get daemonset <daemon-name> -o yaml > new-daemon.yaml

======================================================================================================================================

Scheduler:

-- It has an algorithm that distributes pods across nodes evenly as well as takes into consideration

kubectl get events
kubectl logs my-custom-Scheduler --name-space=kube-system
kubectl get componentstatuses

======================================================================================================================================

Rolling Updates:

kubectl rollout status deployment/<deployment-name>
kubectl rollout history deployment/<deployment-name>
kubectl apply -f deployment-defination.yaml
kubectl set image deployment/<deployment-name> nginx=nginx:1.9.1

Rollback:
kubectl rollout undo deployment/<deployment-name>


environment variable can be define in pod-defination.yaml file with key value pair | array format
types of env are:
1. Plain Key-Value pair
2. ConfigMap: Maps. ConfigMaps are used to pass configuration data in the form of key value pairs in Kubernetes.
   When it pod is created inject the config map into the pod.
   So the key value pairs that are available as environment variables for the application hosted inside the container in the pod

   kubectl create configmap <config-name> --from-literal=<key>-<value>
   kubectl create configmap app-config --from-literal=APP_COLOR=blue --from-literal=APP_MODE=prod
   kubectl create configmap <config-name> --from-file=<path-to-file>
   kubectl create configmap app-config --from-file=app_config.properties
   kubectl create -f <config-map.yaml>
   kubectl get configmaps
   kubectl describe configmap
   
3. Secrets
